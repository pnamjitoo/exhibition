package com.exhibition.item;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import util.DBManager;
import util.PagingVO;

public class ItemDAO {
	
	private ItemDAO() {
	}
	
	private static ItemDAO instance = new ItemDAO();
	public static ItemDAO getInstance() {
		return instance;
	}
	
	//아이템 페이징 메소드(전체 갯수 조회)
	public int countItem(int tema_no) {
		int total = 0;
		String sql ="SELECT COUNT(*) FROM item where tema_no=?";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, tema_no);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				total = rs.getInt("COUNT(*)");
			}
		}catch(SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				rs.close();
				pstmt.close();
				conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return total;
		
	}
	
	public PagingVO pagingAccess(int tema_no, int nowPage, int cntPerPage) {
		int total = countItem(tema_no);
		PagingVO pVo = new PagingVO(total, nowPage, cntPerPage);
		return pVo;
	}
	
	//아이템 페이징 목록 출력 메소드
	public List<ItemVO> selectAllItems(int tema_no, int nowPage, int cntPerPage){
		int total = countItem(tema_no);
		PagingVO pVo = new PagingVO(total, nowPage, cntPerPage);
		int startBdr = pVo.getStartBdr();
		int endBdr = pVo.getEndBdr();
		PreparedStatement pstmt = null;
		String sql ="SELECT * \r\n"
				+ "    FROM (\r\n"
				+ "        SELECT ROWNUM RN, A.* \r\n"
				+ "            FROM (\r\n"
				+ "                    SELECT * \r\n"
				+ "                    FROM item\r\n"
				+ "                    WHERE tema_no between ? and ? \r\n"	
				+ "                    ORDER BY item_no DESC \r\n"
				+ "                    ) A\r\n"
				+ "            )\r\n"
				+ "WHERE RN BETWEEN ? AND ?";
		List<ItemVO> list = new ArrayList<ItemVO>();
		Connection conn = null;
		ResultSet rs = null;
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			if (tema_no != 1) {
				pstmt.setInt(1,tema_no);
				pstmt.setInt(2,tema_no);
				pstmt.setInt(3,startBdr);
				pstmt.setInt(4,endBdr);
			} else {
				pstmt.setInt(1,1);
				pstmt.setInt(2,6);
				pstmt.setInt(3,startBdr);
				pstmt.setInt(4,endBdr);
			}
			rs = pstmt.executeQuery();
			while(rs.next()) {
				ItemVO iVo = new ItemVO();
				iVo.setItem_no(rs.getInt("item_no"));
				iVo.setItem_name(rs.getString("item_name"));
				iVo.setItem_photo(rs.getString("item_photo"));
				iVo.setTema_no(rs.getInt("tema_no"));
				/*
				 * iVo.setPrice(rs.getInt("price")); iVo.setBenefit(rs.getString("benefit"));
				 * iVo.setSale(rs.getInt("sale")); iVo.setNum(rs.getInt("num"));
				 * iVo.setItem_content(rs.getString("item_content"));
				 * iVo.setPlace(rs.getString("place"));
				 * iVo.setLocation(rs.getString("location")); iVo.setLikes(rs.getInt("likes"));
				 * iVo.setHits(rs.getInt("hits")); iVo.setOpendate(rs.getTimestamp("opendate"));
				 * iVo.setClosedate(rs.getTimestamp("closedate"));
				 * iVo.setItem_photo(rs.getString("item_photo"));
				 * iVo.setRuntime(rs.getString("runtime"));
				 * iVo.setItem_age(rs.getString("item_age"));
				 * iVo.setItem_rdate(rs.getTimestamp("item_rdate"));
				 * iVo.setTema_no(rs.getInt("tema_no"));
				 */
				list.add(iVo);
			}
		}catch(SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				rs.close();
				pstmt.close();
				conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return list;
	}
	
	//아이템 상세 조회 메소드
	public ItemVO selectOneItemByNum(String item_no) {
	String sql = "select * from item where item_no = ?";
	ItemVO iVo = null;
	Connection conn = null;
	PreparedStatement pstmt =null;
	ResultSet rs=null;
	try {
		conn = DBManager.getConnection();
		updateReadCount(item_no);
		pstmt = conn.prepareStatement(sql);
		pstmt.setString(1, item_no);
		rs= pstmt.executeQuery();
		if(rs.next()) {
			iVo = new ItemVO();
			iVo.setItem_no(rs.getInt("item_no"));
			iVo.setItem_name(rs.getString("item_name"));
			iVo.setPrice(rs.getInt("price"));
			iVo.setBenefit(rs.getString("benefit"));
			iVo.setSale(rs.getInt("sale"));
			iVo.setNum(rs.getInt("num"));
			iVo.setItem_content(rs.getString("item_content"));
			iVo.setPlace(rs.getString("place"));
			iVo.setLocation(rs.getString("location"));
			iVo.setLikes(rs.getInt("likes"));
			iVo.setHits(rs.getInt("hits"));
			iVo.setOpendate(rs.getTimestamp("opendate"));
			iVo.setClosedate(rs.getTimestamp("closedate"));
			iVo.setItem_photo(rs.getString("item_photo"));
			iVo.setRuntime(rs.getString("runtime"));
			iVo.setItem_age(rs.getString("item_age"));
			iVo.setItem_rdate(rs.getTimestamp("item_rdate"));
			iVo.setTema_no(rs.getInt("tema_no"));
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			DBManager.close(conn, pstmt, rs);
		}
		return iVo;
	}
	
	//아이템 조회수 메소드
	public void updateReadCount(String item_no) {
		String sql = "update item set hits=hits+1 where item_no=?";
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, item_no);
			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBManager.close(conn, pstmt);
		}
	}
}

